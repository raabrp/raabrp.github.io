<html>
    <head>
        <title>Chess</title>
        <meta name="date" content="2018-12-04" />
        <meta name="slug" content="chess" />
    </head>
    <body>
        <h2>For Correspondence Play</h2>
        <link rel="stylesheet" type="text/css" href="/css/chess.css">
        <script
            src="https://code.jquery.com/jquery-3.3.1.min.js"
            integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
            crossorigin="anonymous"></script>
        <script src="/js/chessboard.js"></script>
        <script src="/js/chess.js"></script>

        <p><span id="status"></span></p>
        <div id="board" style="width: 100%"></div>
        <br>
        <div style="text-align:center;">
          <input type="button" class="button" id="startBtn" value="<<" />
          <input type="button" class="button" id="prevBtn" value="<" />
          <input type="button" class="button" id="resetBtn" value="_" />
          <input type="button" class="button" id="nextBtn" value=">" />
          <input type="button" class="button" id="lastBtn" value=">>" />
          <input type="button" class="button" id="flipBtn" value="Flip" />
        </div>
        <hr>
        <div style="text-align:center;">
            <input type="button" class="button" id="linkBtn" value="Link" />
            <input type="button" class="button" id="fenBtn" value="FEN" />
            <input type="button" class="button" id="pgnBtn" value="PGN"/>
            <input type="button" class="button" id="loadBtn" value="Load"/>
        </div>
        <br>
        <textarea id="field" style="width: 100%; height: 400px;"></textarea>
        <hr>
        See also:<br>
        <a href="/chess.html?dark">Dark-Chess Variant</a><br>
        <a href="https://www.apronus.com/chess/pgnviewer/">Apronus chess viewer</a><br>
        <a href="http://chessboardjs.com/">chessboard.js</a><br>
        <a href="https://github.com/jhlywa/chess.js">chess.js</a><br>

<script type="text/javascript">

 var board,
     pgn,
     hist,
     move_num,
     game = new Chess(),
     statusEl = $('#status'),
     fieldEl = $('#field');

 function parse_url() {

     var chess = new Chess(); // for validation only

     var start = '';

     if (window.location.search) {
         try {
             pgn = window.location.search.substr(1).replace(/_/g, ' ');
             if (!chess.load_pgn(pgn)) {
                 throw "Invalid URL String";
             } else {
                 return pgn;
             }
         } catch (e) {
             fieldEl.val("Invalid URL String");
             return start;
         }
     } else {
         return start;
     }
 }

 function generate_url() {
     payload = game.pgn().replace(/\s*[0-9]\.\s+|\s+/g, ' ').replace(/ /g, '_');
     return window.location.hostname + window.location.pathname + '?' + payload;
 }

 pgn = parse_url();
 game.load_pgn(pgn);

 var position = game.fen() || 'start';
 hist = game.history();
 move_num = hist.length;

 function domove(m) {

     if (hist.length > game.history().length) {
         eq_test = new Chess(game.fen());
         eq_test.move(m);
     }

     var is_valid = game.move(m);

     if (is_valid) {

         if (((hist.length > game.history().length) &&
              (!(eq_test.fen() == game.fen()))) ||
             (game.history().length > hist.length)) {
             hist = game.history();
         }

         move_num += 1;
     }

     return is_valid;
 }

 ///////////////////////////////////////////////////////////////////////////////

 // do not pick up pieces if the game is over
 // only pick up pieces for the side to move
 var onDragStart = function(source, piece, position, orientation) {
     if (game.game_over() === true ||
       (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
       (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
     return false;
   }
 };

 var onDrop = function(source, target) {
   // see if the move is legal
   var move = domove({
     from: source,
     to: target,
     promotion: 'q' // note: always promote to a queen for example simplicity
   });

   // illegal move
   if (move === null) return 'snapback';

   updateStatus();
 };

 // update the board position after the piece snap
 // for castling, en passant, pawn promotion
 var onSnapEnd = function() {
     board.position(game.fen());
 };

 var updateStatus = function() {
     var status = (Math.floor(game.history().length / 2) + 1).toString() + ': ';

     var movecolor = 'White';
     if (game.turn() === 'b') {
         movecolor = 'Black';
     }

     // checkmate?
     if (game.in_checkmate() === true) {
         status = 'Game over, ' + movecolor + ' is in checkmate.';
     }

     // draw?
     else if (game.in_draw() === true) {
         status = 'Game over, drawn position';
     }

     // game still on
     else {
         status += movecolor + ' to move';

         // check?
         if (game.in_check() === true) {
             status += '; ' + movecolor + ' is in check';
         }
     }

     statusEl.html(status);
 };

 var update = function() {
     board.position(game.fen());
     updateStatus();
 }

 board = ChessBoard('board', {
     draggable: true,
     position: position,
     pieceTheme: '/images/chesspieces/{piece}.png',
     moveSpeed: 50,
     snapbackSpeed: 50,
     snapSpeed: 50,
     onDragStart: onDragStart,
     onDrop: onDrop,
     onSnapEnd: onSnapEnd
 });

 //////////////////////////////////////////////////////////////////////////////

 $('#startBtn').on('click', function(){
     game.reset();
     move_num = 0;
     update();
 });
 $('#prevBtn').on('click', function(){
     if (move_num > 0) {
         game.undo();
         move_num -= 1;
         update();
     }
 });
 $('#resetBtn').on('click', function(){
     game.load_pgn(pgn);
     move_num = game.history().length;
     update();
 });
 $('#nextBtn').on('click', function(){
     domove(hist[move_num]);
     update();
 });
 $('#lastBtn').on('click', function(){
     while (move_num < hist.length) {
         domove(hist[move_num]);
     }
     update();
 });
 $('#flipBtn').on('click', board.flip);

 $('#linkBtn').on('click', function() {
     fieldEl.val(generate_url());
 });
 $('#fenBtn').on('click', function() {
     fieldEl.val(game.fen());
 });
 $('#pgnBtn').on('click', function() {
     fieldEl.val(game.pgn({ 'max_width': 5, 'newline_char': '\n' }));
 });
 $('#loadBtn').on('click', function() {
     if (game.load(fieldEl.val()) || game.load_pgn(fieldEl.val())) {
         update();
         hist = game.history();
         move_num = hist.length;
         window.history.pushState({}, '', generate_url());
     } else {
         fieldEl.val('Could not load input');
     }
 });


 update();

</script>

    </body>
</html>
