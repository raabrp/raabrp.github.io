<html>
    <head>
        <title>Live Tex to PNG</title>
        <meta name="date" content="2021-02-18" />
        <meta name="slug" content="tex" />

    </head>
    <body>

      <div style="height: 400px; display: flex; justify-content: center; align-items: center;">
        <div style="background: #fff; height: auto;">
          <img id="demo-img" style="max-height: 400px;" src=""/>
        </div>
      </div>
      <br />
      <textarea id="demo-input" style="width: 100%; height: 100px;" spellcheck="false">
f(x) = \int_{-\infty}^\infty
    \hat{f}(\xi)\,e^{2 \pi i \xi x}
    \,d\xi
      </textarea>
      <p><span>Size ( in [1, 1000] ): </span><input type="number" id="scale" name="scale" value="30" /></p>
      <p>Powered by <a href="https://www.mathjax.org/">MathJax</a></p>

<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>

<script type="text/javascript">

  var dimg = document.getElementById("demo-img");
  var inpt = document.getElementById("demo-input");
  var scale = document.getElementById("scale");

  let max_scale = 1000;
  let min_scale = 1;
  scale.setAttribute("max", max_scale);
  scale.setAttribute("min", min_scale);
  
  var paint_timeout;
  function paint() {
      MathJax.tex2svgPromise(inpt.value).then(function(el) {

          let svg = el.children[0];

          let box = svg.viewBox.baseVal;
          let w = box.width;
          let h = box.height;
          
          let s = Math.min(Math.max(scale.value, min_scale), max_scale);

          let w2 = w * (s / max_scale);
          let h2 = h * (s / max_scale);
          
          svg.setAttribute("width", w2.toString() + "px");
          svg.setAttribute("height", h2.toString() + "px"); 
          
          var data = (new XMLSerializer()).serializeToString(svg); 

          var DOMURL = window.URL || window.webkitURL || window;

          var img = new Image();
          var svgBlob = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});

          var url = DOMURL.createObjectURL(svgBlob);

          dimg.src = url;
          // dimg.style["border"] = "medium solid #525";
          // setTimeout(function(){
          //    dimg.style["border"] = "medium solid #444";
          // }, 100);
          
      });
  }
  
  function doDemo() {
      try {
          clearTimeout(paint_timeout)
          paint_timeout = setTimeout(paint, 500);
          
      } catch (err) {
          console.log(err);
      }
  }

  inpt.addEventListener("input", doDemo);
  scale.addEventListener("input", doDemo);

  doDemo();
</script>
    </body>
</html>


<!-- As of now (Feb 2021), katex doesn't allow rendering to canvas, and html2canvas doesn't -->
<!-- work well for the more complex formulas. Switching to MathJax. -->

<!-- <html> -->
<!--     <head> -->
<!--         <title>KaTeX</title> -->
<!--         <meta name="date" content="2021-02-18" /> -->
<!--         <meta name="slug" content="tex" /> -->
<!--     </head> -->
<!--     <body> -->


<!--       <div id="demo"> -->
<!--       <div id="demo-output"></div> -->
<!--       <br/ > -->
<!--       <textarea id="demo-input" style="background-color: #222; color:#aaa; width: 100%; height: 400px;" spellcheck="false"> -->
<!-- % \f is defined as #1f(#2) using the macro -->
<!-- \f\relax{x} = \int_{-\infty}^\infty -->
<!--     \f\hat\xi\,e^{2 \pi i \xi x} -->
<!-- \,d\xi -->
<!--       </textarea> -->
<!--       <canvas id="demo-canvas" style="width: 100%; height: 400px;"> -->
<!--       </div> -->

<!-- <script defer src="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js" integrity="sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4" crossorigin="anonymous"></script> -->

<!-- <\!-- <script src="/theme/js/lib/html2canvas.js"></script> -\-> -->

<!-- <script type="text/javascript"> -->
<!--   // https://katex.org/js/index.js -->

<!--   // The MIT License (MIT) -->
<!--   // Copyright (c) 2013-2020 Khan Academy and other contributors -->

<!--   // Permission is hereby granted, free of charge, to any person obtaining a copy -->
<!--   // of this software and associated documentation files (the "Software"), to deal -->
<!--   // in the Software without restriction, including without limitation the rights -->
<!--   // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell -->
<!--   // copies of the Software, and to permit persons to whom the Software is -->
<!--   // furnished to do so, subject to the following conditions: -->

<!--   // The above copyright notice and this permission notice shall be included in all -->
<!--   // copies or substantial portions of the Software. -->

<!--   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR -->
<!--   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, -->
<!--   // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE -->
<!--   // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER -->
<!--   // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, -->
<!--   // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE -->
<!--   // SOFTWARE. -->

<!--   var demo = document.getElementById("demo"); -->
<!--   var demoInput = document.getElementById("demo-input"); -->
<!--   var demoOutput = document.getElementById("demo-output"); -->
<!--   var oldCanvas = document.getElementById("demo-canvas"); -->

<!--   var paint_timeout; -->
<!--   function paint() { -->
<!--       html2canvas(demoOutput).then(function(canvas) { -->
<!--           demo.replaceChild(canvas, oldCanvas); -->
<!--           oldCanvas = canvas;  -->
<!--       }); -->
<!--   } -->

<!--   function doDemo() { -->
<!--       try { -->
<!--           katex.render(demoInput.value, demoOutput, { -->
<!--               displayMode: true, -->
<!--               macros: { -->
<!--                   // "\\RR": "\\mathbb{R}" -->
<!--               } -->
<!--           }); -->

<!--           clearTimeout(paint_timeout) -->
<!--           paint_timeout = setTimeout(paint, 1000); -->

<!--       } catch (err) { -->
<!--           while (demoOutput.lastChild) { -->
<!--               demoOutput.removeChild(demoOutput.lastChild); -->
<!--           } -->
<!--           var msg = document.createTextNode(err.message); -->
<!--           var span = document.createElement("span"); -->
<!--           span.appendChild(msg); -->
<!--           demoOutput.appendChild(span); -->
<!--           span.setAttribute("class", "errorMessage"); -->
<!--       } -->
<!--   } -->

<!--   demoInput.addEventListener("input", doDemo); -->

<!-- </script> -->
<!--     </body> -->
<!-- </html> -->
